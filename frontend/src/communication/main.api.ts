//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class SettingsApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getJobSettings(): Observable<JobSettings> {
        let url_ = this.baseUrl + "/api/settings/jobs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobSettings>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobSettings>;
        }));
    }

    protected processGetJobSettings(response: HttpResponseBase): Observable<JobSettings> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobSettings.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JobSettings>(null as any);
    }

    setJobSettings(model: JobSettings): Observable<AffectionViewModel> {
        let url_ = this.baseUrl + "/api/settings/jobs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetJobSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetJobSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AffectionViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AffectionViewModel>;
        }));
    }

    protected processSetJobSettings(response: HttpResponseBase): Observable<AffectionViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AffectionViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AffectionViewModel>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TasksApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(scope?: VisibleScope | undefined): Observable<PageViewModelOfTaskViewModel> {
        let url_ = this.baseUrl + "/api/tasks?";
        if (scope === null)
            throw new Error("The parameter 'scope' cannot be null.");
        else if (scope !== undefined)
            url_ += "scope=" + encodeURIComponent("" + scope) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PageViewModelOfTaskViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PageViewModelOfTaskViewModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PageViewModelOfTaskViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageViewModelOfTaskViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageViewModelOfTaskViewModel>(null as any);
    }

    create(request: CreateTaskRequestModel): Observable<AffectionViewModel> {
        let url_ = this.baseUrl + "/api/tasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AffectionViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AffectionViewModel>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<AffectionViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AffectionViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AffectionViewModel>(null as any);
    }

    getById(id: number): Observable<TaskViewModel> {
        let url_ = this.baseUrl + "/api/tasks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TaskViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TaskViewModel>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<TaskViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskViewModel>(null as any);
    }

    patch(id: number, request: UpdateTaskRequestModel): Observable<AffectionViewModel> {
        let url_ = this.baseUrl + "/api/tasks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPatch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPatch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AffectionViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AffectionViewModel>;
        }));
    }

    protected processPatch(response: HttpResponseBase): Observable<AffectionViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AffectionViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AffectionViewModel>(null as any);
    }

    archive(id: number): Observable<AffectionViewModel> {
        let url_ = this.baseUrl + "/api/tasks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processArchive(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processArchive(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AffectionViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AffectionViewModel>;
        }));
    }

    protected processArchive(response: HttpResponseBase): Observable<AffectionViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AffectionViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AffectionViewModel>(null as any);
    }
}

export class JobSettings implements IJobSettings {
    checkTaskExpirationJobSec?: number;

    constructor(data?: IJobSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkTaskExpirationJobSec = _data["checkTaskExpirationJobSec"];
        }
    }

    static fromJS(data: any): JobSettings {
        data = typeof data === 'object' ? data : {};
        let result = new JobSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkTaskExpirationJobSec"] = this.checkTaskExpirationJobSec;
        return data;
    }

    clone(): JobSettings {
        const json = this.toJSON();
        let result = new JobSettings();
        result.init(json);
        return result;
    }
}

export interface IJobSettings {
    checkTaskExpirationJobSec?: number;
}

export class AffectionViewModel implements IAffectionViewModel {
    id?: number | undefined;
    timeUtc?: string;

    constructor(data?: IAffectionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.timeUtc = _data["timeUtc"];
        }
    }

    static fromJS(data: any): AffectionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AffectionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["timeUtc"] = this.timeUtc;
        return data;
    }

    clone(): AffectionViewModel {
        const json = this.toJSON();
        let result = new AffectionViewModel();
        result.init(json);
        return result;
    }
}

export interface IAffectionViewModel {
    id?: number | undefined;
    timeUtc?: string;
}

export class PageViewModelOfTaskViewModel implements IPageViewModelOfTaskViewModel {
    items?: TaskViewModel[] | undefined;

    constructor(data?: IPageViewModelOfTaskViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageViewModelOfTaskViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PageViewModelOfTaskViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageViewModelOfTaskViewModel {
        const json = this.toJSON();
        let result = new PageViewModelOfTaskViewModel();
        result.init(json);
        return result;
    }
}

export interface IPageViewModelOfTaskViewModel {
    items?: TaskViewModel[] | undefined;
}

export class TaskViewModel implements ITaskViewModel {
    id?: number;
    state?: RootState;
    title?: string | undefined;
    description?: string | undefined;
    status?: TaskStatus;
    expirationUtc?: string | undefined;
    createdUtc?: string;
    updatedUtc?: string;

    constructor(data?: ITaskViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.state = _data["state"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.expirationUtc = _data["expirationUtc"];
            this.createdUtc = _data["createdUtc"];
            this.updatedUtc = _data["updatedUtc"];
        }
    }

    static fromJS(data: any): TaskViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        data["title"] = this.title;
        data["description"] = this.description;
        data["status"] = this.status;
        data["expirationUtc"] = this.expirationUtc;
        data["createdUtc"] = this.createdUtc;
        data["updatedUtc"] = this.updatedUtc;
        return data;
    }

    clone(): TaskViewModel {
        const json = this.toJSON();
        let result = new TaskViewModel();
        result.init(json);
        return result;
    }
}

export interface ITaskViewModel {
    id?: number;
    state?: RootState;
    title?: string | undefined;
    description?: string | undefined;
    status?: TaskStatus;
    expirationUtc?: string | undefined;
    createdUtc?: string;
    updatedUtc?: string;
}

export enum RootState {
    Active = "Active",
    Archived = "Archived",
}

export enum TaskStatus {
    NotDefined = "NotDefined",
    Pending = "Pending",
    Processing = "Processing",
    Expired = "Expired",
    Processed = "Processed",
}

export enum VisibleScope {
    Active = "Active",
    All = "All",
}

export class CreateTaskRequestModel implements ICreateTaskRequestModel {
    title?: string | undefined;
    description?: string | undefined;
    expirationUtc?: string | undefined;

    constructor(data?: ICreateTaskRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.expirationUtc = _data["expirationUtc"];
        }
    }

    static fromJS(data: any): CreateTaskRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTaskRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["expirationUtc"] = this.expirationUtc;
        return data;
    }

    clone(): CreateTaskRequestModel {
        const json = this.toJSON();
        let result = new CreateTaskRequestModel();
        result.init(json);
        return result;
    }
}

export interface ICreateTaskRequestModel {
    title?: string | undefined;
    description?: string | undefined;
    expirationUtc?: string | undefined;
}

export class UpdateTaskRequestModel implements IUpdateTaskRequestModel {
    title?: string | undefined;
    description?: string | undefined;
    status?: TaskStatus | undefined;
    expirationUtc?: string | undefined;

    constructor(data?: IUpdateTaskRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.expirationUtc = _data["expirationUtc"];
        }
    }

    static fromJS(data: any): UpdateTaskRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["status"] = this.status;
        data["expirationUtc"] = this.expirationUtc;
        return data;
    }

    clone(): UpdateTaskRequestModel {
        const json = this.toJSON();
        let result = new UpdateTaskRequestModel();
        result.init(json);
        return result;
    }
}

export interface IUpdateTaskRequestModel {
    title?: string | undefined;
    description?: string | undefined;
    status?: TaskStatus | undefined;
    expirationUtc?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}